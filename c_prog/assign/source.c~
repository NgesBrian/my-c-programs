/*This program is written by Njungle Nges Brian MAtricule Number:FE14A169 as an assignment 
of system programming given by Dr Nguti
on November  29th 2015

This program counts alll the words inputed by file or by text and prints the frequency of each word with the word.
This is printed in the file and in the terminal.
An example is all the works of Shakespere.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
typedef struct treeNode TreeNode;

//Creates a tree node structure
 struct treeNode{
	char word[50];
	int count;
    TreeNode *left;
	TreeNode *right;
};

//function declearation
void NewNode( TreeNode **root, char *word);
void InOrderTraversal( TreeNode *rootNode);


int main(void){
	
	//This declaration initialises the output file discarding all its content if it exist
	FILE *fp;	
	fp = fopen("shakespeare-word","a");
	TreeNode *root;
	char word[50];
	int ch;

	root = NULL;
	//Reads input and store in binary tree until end of file is read
	while( ( ch = getc(stdin)) != EOF){
		
		ungetc(ch, stdin);
		scanf("%s",word);
		NewNode( &root, word);
	}

	InOrderTraversal(root);

	fclose(fp);
	free;
	return 0;
}


//this functions adds a node to the tree
void NewNode( TreeNode **root, char *word){

//if no root exist then add one and make the frequency one
	if( *root == NULL){
		*root = malloc( sizeof(TreeNode));
		int i = 0;


		//Transfers word to (*root)->word
		for( i = 0; word[i] != '\0'; i++)
		
			(*root)->word[i] = word[i];
		
		(*root)->count = 1;
		(*root)->left = (*root)->right = NULL;
	}
//if root exist check wether the word is bigger or smaller than the word then add it to the right r left of the node intravesel respectively
	else if( strcmp((*root)->word, word) > 0)
		NewNode( &(*root)->left, word);
	else if( strcmp( (*root)->word, word) < 0)
		NewNode( &(*root)->right, word);
	else
		(*root)->count++;
}
//This function traverses the tree inorderly and prints the tree to a file and also to the screen
void InOrderTraversal( TreeNode *rootNode){
	if( rootNode != NULL){
		FILE *fp;
		fp = fopen("shakespeare-word","a");

		InOrderTraversal(rootNode->left);
		fprintf(fp,"\t%-20s\t%-10d\n", rootNode->word, rootNode->count );
		printf("\t%-20s\t%-10d\n", rootNode->word, rootNode->count );
		InOrderTraversal( rootNode->right);
		fclose(fp);
		free;
	}
}

